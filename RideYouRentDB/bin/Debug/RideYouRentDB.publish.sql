/*
Deployment script for rideyourent-dbs

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "rideyourent-dbs"
:setvar DefaultFilePrefix "rideyourent-dbs"
:setvar DefaultDataPath "C:\Users\David\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"
:setvar DefaultLogPath "C:\Users\David\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Car]...';


GO
CREATE TABLE [dbo].[Car] (
    [carID]               VARCHAR (6)   NOT NULL,
    [makeID]              INT           NOT NULL,
    [bodyTypeID]          INT           NOT NULL,
    [carModel]            VARCHAR (255) NOT NULL,
    [kilometersTravelled] INT           NOT NULL,
    [serviceKilometers]   INT           NOT NULL,
    [available]           BIT           NOT NULL,
    [serviceDue]          BIT           NOT NULL,
    CONSTRAINT [PK_carID] PRIMARY KEY CLUSTERED ([carID] ASC)
);


GO
PRINT N'Creating Table [dbo].[CarBodyType]...';


GO
CREATE TABLE [dbo].[CarBodyType] (
    [bodyTypeID]   INT           IDENTITY (1, 1) NOT NULL,
    [bodyTypeName] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_bodyTypeID] PRIMARY KEY CLUSTERED ([bodyTypeID] ASC)
);


GO
PRINT N'Creating Table [dbo].[CarMake]...';


GO
CREATE TABLE [dbo].[CarMake] (
    [makeID]   INT           IDENTITY (1, 1) NOT NULL,
    [makeName] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_makeID] PRIMARY KEY CLUSTERED ([makeID] ASC)
);


GO
PRINT N'Creating Table [dbo].[CarRental]...';


GO
CREATE TABLE [dbo].[CarRental] (
    [rentalID]    INT         IDENTITY (1, 1) NOT NULL,
    [carID]       VARCHAR (6) NOT NULL,
    [inspectorID] VARCHAR (4) NOT NULL,
    [driverID]    INT         NOT NULL,
    [rentalFee]   INT         NOT NULL,
    [startDate]   DATE        NOT NULL,
    [endDate]     DATE        NULL,
    CONSTRAINT [PK_rentalID] PRIMARY KEY CLUSTERED ([rentalID] ASC)
);


GO
PRINT N'Creating Table [dbo].[CarReturn]...';


GO
CREATE TABLE [dbo].[CarReturn] (
    [returnID]    INT          IDENTITY (1, 1) NOT NULL,
    [rentalID]    INT          NOT NULL,
    [inspectorID] VARCHAR (4)  NOT NULL,
    [driverID]    INT          NOT NULL,
    [returnDate]  DATE         NULL,
    [elapsedDate] INT          NOT NULL,
    [fine]        DECIMAL (18) NULL,
    CONSTRAINT [PK_returnID] PRIMARY KEY CLUSTERED ([returnID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Driver]...';


GO
CREATE TABLE [dbo].[Driver] (
    [driverID]           INT           IDENTITY (1, 1) NOT NULL,
    [driverName]         VARCHAR (255) NOT NULL,
    [driverAddress]      VARCHAR (255) NOT NULL,
    [driverEmail]        VARCHAR (255) NOT NULL,
    [driverMobileNumber] VARCHAR (10)  NOT NULL,
    CONSTRAINT [PK_driverID] PRIMARY KEY CLUSTERED ([driverID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Inspector]...';


GO
CREATE TABLE [dbo].[Inspector] (
    [inspectorID]           VARCHAR (4)   NOT NULL,
    [inspectorName]         VARCHAR (255) NOT NULL,
    [inspectorEmail]        VARCHAR (255) NOT NULL,
    [inspectorMobileNumber] VARCHAR (10)  NOT NULL,
    CONSTRAINT [PK_inspectorID] PRIMARY KEY CLUSTERED ([inspectorID] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_bodyTypeID]...';


GO
ALTER TABLE [dbo].[Car]
    ADD CONSTRAINT [FK_bodyTypeID] FOREIGN KEY ([bodyTypeID]) REFERENCES [dbo].[CarBodyType] ([bodyTypeID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_makeID]...';


GO
ALTER TABLE [dbo].[Car]
    ADD CONSTRAINT [FK_makeID] FOREIGN KEY ([makeID]) REFERENCES [dbo].[CarMake] ([makeID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_carID]...';


GO
ALTER TABLE [dbo].[CarRental]
    ADD CONSTRAINT [FK_carID] FOREIGN KEY ([carID]) REFERENCES [dbo].[Car] ([carID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_driverID]...';


GO
ALTER TABLE [dbo].[CarRental]
    ADD CONSTRAINT [FK_driverID] FOREIGN KEY ([driverID]) REFERENCES [dbo].[Driver] ([driverID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_inspectorID]...';


GO
ALTER TABLE [dbo].[CarRental]
    ADD CONSTRAINT [FK_inspectorID] FOREIGN KEY ([inspectorID]) REFERENCES [dbo].[Inspector] ([inspectorID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_rentalID]...';


GO
ALTER TABLE [dbo].[CarReturn]
    ADD CONSTRAINT [FK_rentalID] FOREIGN KEY ([rentalID]) REFERENCES [dbo].[CarRental] ([rentalID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ReturnDriverID]...';


GO
ALTER TABLE [dbo].[CarReturn]
    ADD CONSTRAINT [FK_ReturnDriverID] FOREIGN KEY ([driverID]) REFERENCES [dbo].[Driver] ([driverID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ReturnInspectorID]...';


GO
ALTER TABLE [dbo].[CarReturn]
    ADD CONSTRAINT [FK_ReturnInspectorID] FOREIGN KEY ([inspectorID]) REFERENCES [dbo].[Inspector] ([inspectorID]);


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
